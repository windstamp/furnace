/************************************************************************/
/* @file:	event_mgr.h                                                 */
/* @brief:	事件管理器                                                  */
/* @author:	Zhang Keliang                                               */
/* @email:	klzhang@fudan.edu.cn                                        */
/* @date:	2017-07-27                                                  */
/* @last:	2017-07-27                                                  */
/*                                                                      */
/* 同时支持同步事件和异步事件                                           */
/*                                                                      */
/************************************************************************/

#ifndef __WARLORD_COMMON_EVENT_MGR_H__
#define __WARLORD_COMMON_EVENT_MGR_H__

#include "public_include.h"

class tagEventBase;

class EventMgr
{
public:
	//-------------------------------------------------------------------------
	// 构造函数和析构函数
	//-------------------------------------------------------------------------
	EventMgr();
	~EventMgr();

public:
	//-------------------------------------------------------------------------
	// 初始化、销毁
	//-------------------------------------------------------------------------
	bool			Init();
	void			Destroy();
	
public:
	//-------------------------------------------------------------------------
	// 每帧更新
	//-------------------------------------------------------------------------
	void			Update();
	
public:
	//-------------------------------------------------------------------------
	// 注册事件处理函数
	// 1. 注册异步事件处理函数
	// 2. 注册同步事件处理函数
	//-------------------------------------------------------------------------
	bool			RegisterAsyncEventHandler(const int32_t _event_id, async_event_handle_func _event_handler);
	bool			RegisterSyncEventHandler(const int32_t _event_id, sync_event_handle_func _event_handler);
	
public:
	//-------------------------------------------------------------------------
	// 异步事件
	// 1. 添加异步事件
	// 2. 每帧更新 - 触发异步事件
	//-------------------------------------------------------------------------
	bool			AddAsyncEvent(tagEventBase* _event_base);
	void			UpdateAsyncEvent();
	
public:
	//-------------------------------------------------------------------------
	// 触发同步事件
	//-------------------------------------------------------------------------
	void			SendSyncEvent(tagEventBase& _event_base);
	
public:
	//-------------------------------------------------------------------------
	// 成员变量的 get/set 函数
	//-------------------------------------------------------------------------
	
private:
	//-------------------------------------------------------------------------
	// 成员变量
	//-------------------------------------------------------------------------
	std::list<tagEventBase*>									async_event_list_;		// 异步事件列表
	std::map<int32_t, std::list<async_event_handle_func> >		async_event_handlers_;	// 异步事件处理函数
	
	std::map<int32_t, std::list<sync_event_handle_func> >		sync_event_handlers_;	// 同步事件处理函数
};

#endif /* __WARLORD_COMMON_EVENT_MGR_H__ */
